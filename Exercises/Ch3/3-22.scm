;;; SICP Exercise 3.22 by Yuzhe Wu, 30 Apr 2020


(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
     (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((null? front-ptr) 
	       (set! front-ptr new-pair) 
	       (set! rear-ptr new-pair) 
	       front-ptr)
	      (else
	       (set-cdr! rear-ptr new-pair) 
	       (set! rear-ptr new-pair) 
	       front-ptr))))
    (define (delete-queue!)
      (cond ((null? front-ptr)
	     (error "DELETE! called with an empty queue" front-ptr)) 
	    (else (set! front-ptr (cdr front-ptr))
		  front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (null? front-ptr))
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)
	    (else (error "undefined operation: MAKE-QUEUE" m))))
    dispatch))

(define (empty-queue? queue)
  (queue 'empty-queue?))
(define (insert-queue! queue item)
  ((queue 'insert-queue!) item))
(define (delete-queue! queue)
  ((queue 'delete-queue!)))